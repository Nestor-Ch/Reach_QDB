fuzzy_result_id
# call a python function that'll get me the semantic similarities. Run them on merger columns. Works better
fuzzy_result <-  similarity_calculator(
column_new = new_input %>% dplyr::filter(q.type %in% type_element) %>% pull(merger_column_new) %>% unique(),
qdb = database_clean %>% dplyr::filter(q.type %in% type_element) %>% select(true_ID, merger_column) %>%  distinct(),
sim_th = 0.89
)
PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','spacy')
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
if(any(grepl(Sys.getenv('VIRTUALENV_NAME'),reticulate::virtualenv_list()))){
reticulate::use_virtualenv(virtualenv_dir, required = T)
}
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
# install packages
if(any(!c(spacy_av,pandas_av))){
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=FALSE)
}
# install the language model
if(!model_av){
system("python -c \"import spacy; spacy.cli.download('en_core_web_md')\"")
}
# source the python script
if(!exists('similarity_calculator')){
reticulate::source_python('www/src/semantic_match.py')
}
# call a python function that'll get me the semantic similarities. Run them on merger columns. Works better
fuzzy_result <-  similarity_calculator(
column_new = new_input %>% dplyr::filter(q.type %in% type_element) %>% pull(merger_column_new) %>% unique(),
qdb = database_clean %>% dplyr::filter(q.type %in% type_element) %>% select(true_ID, merger_column) %>%  distinct(),
sim_th = 0.89
)
fuzzy_result
# get top 10 matches per question
fuzzy_result <- fuzzy_result %>%
group_by(merger_column_new) %>%
arrange(desc(similarity)) %>%
do(head(.,10)) %>% # and keep the top choice for each. At distance of 0.1 they can be considered the same
ungroup()
# get semantically identical rows. We can later semi join them with the fuzzy_result table
fuzzy_result_id2 <- fuzzy_result %>%
group_by(merger_column_new) %>%
filter(similarity>=0.97) %>%
group_by(merger_column_new) %>%
do(head(.,1)) %>%
ungroup()
fuzzy_result %>%
left_join(database_clean %>% filter(q.type %in% type_element) %>%
select(true_ID, database_label_clean) %>% distinct())
fuzzy_result
fuzzy_result %>%
left_join(database_clean %>% filter(q.type %in% type_element) %>%
select(true_ID, database_label_clean) %>% distinct()) %>%
left_join(new_input %>%
dplyr::filter(q.type %in% type_element) %>%
select(sector,text2, label_english,
q.type,name,merger_column_new,list_name,datasheet))%>%
distinct()
# get the labels from the database + other variables from the new_input
fuzzy_result <- fuzzy_result %>%
left_join(database_clean %>% filter(q.type %in% type_element) %>%
select(true_ID, database_label_clean) %>% distinct()) %>%
left_join(new_input %>%
dplyr::filter(q.type %in% type_element) %>%
select(sector,text2, label_english,
q.type,name,merger_column_new,list_name,datasheet))%>%
distinct()
fuzzy_result %>%
semi_join(fuzzy_result_id2) %>%
select(-c(merger_column,similarity)) %>%
select(-c(database_label_clean,label_english,merger_column_new)) %>%
rename(database_label_clean = text2) %>%
mutate(project_ID = input$newName,
round_ID = input$round_id,
survey_type = input$newType) %>%
distinct()
fuzzy_result %>%
semi_join(fuzzy_result_id2) %>%
select(-c(merger_column,similarity)) %>%
select(-c(database_label_clean,label_english,merger_column_new)) %>%
rename(database_label_clean = text2)
fuzzy_result %>% anti_join(fuzzy_result_id2)
fuzzy_result_id2 <- fuzzy_result%>%
semi_join(fuzzy_result_id2) %>%
select(-c(merger_column,similarity)) %>%
select(-c(database_label_clean,label_english,merger_column_new)) %>%
rename(database_label_clean = text2) %>%
# mutate(project_ID = input$newName,
#        round_ID = input$round_id,
#        survey_type = input$newType) %>%
distinct()
fuzzy_result_id2
fuzzy_result %>% anti_join(fuzzy_result_id2)
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
gc()
runApp('shiny_12_final_updates.R')
fuzzy_result
fuzzy_identical
View(fuzzy_result)
# semantic matching for the rest ----------------------
# new_input<<- new_input
type_element<<-c('select_one', 'select_multiple')
# call a python function that'll get me the semantic similarities. Run them on merger columns. Works better
fuzzy_result <-  similarity_calculator(
column_new = new_input %>% dplyr::filter(q.type %in% type_element) %>% pull(merger_column_new) %>% unique(),
qdb = database_clean %>% dplyr::filter(q.type %in% type_element) %>% select(true_ID, merger_column) %>%  distinct(),
sim_th = 0.89
)
PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','spacy')
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
if(any(grepl(Sys.getenv('VIRTUALENV_NAME'),reticulate::virtualenv_list()))){
reticulate::use_virtualenv(virtualenv_dir, required = T)
}
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
# install packages
if(any(!c(spacy_av,pandas_av))){
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=FALSE)
}
# install the language model
if(!model_av){
system("python -c \"import spacy; spacy.cli.download('en_core_web_md')\"")
}
# source the python script
if(!exists('similarity_calculator')){
reticulate::source_python('www/src/semantic_match.py')
}
# call a python function that'll get me the semantic similarities. Run them on merger columns. Works better
fuzzy_result <-  similarity_calculator(
column_new = new_input %>% dplyr::filter(q.type %in% type_element) %>% pull(merger_column_new) %>% unique(),
qdb = database_clean %>% dplyr::filter(q.type %in% type_element) %>% select(true_ID, merger_column) %>%  distinct(),
sim_th = 0.89
)
# semantic matching for the rest ----------------------
# new_input<<- new_input
type_element<<-c('integer', 'decimal')
# call a python function that'll get me the semantic similarities. Run them on merger columns. Works better
fuzzy_result <-  similarity_calculator(
column_new = new_input %>% dplyr::filter(q.type %in% type_element) %>% pull(merger_column_new) %>% unique(),
qdb = database_clean %>% dplyr::filter(q.type %in% type_element) %>% select(true_ID, merger_column) %>%  distinct(),
sim_th = 0.89
)
# get top 10 matches per question
fuzzy_result <- fuzzy_result %>%
group_by(merger_column_new) %>%
arrange(desc(similarity)) %>%
do(head(.,10)) %>% # and keep the top choice for each. At distance of 0.1 they can be considered the same
ungroup()
# get semantically identical rows. We can later semi join them with the fuzzy_result table
fuzzy_result_id2 <- fuzzy_result %>%
group_by(merger_column_new) %>%
filter(similarity>=0.97) %>%
group_by(merger_column_new) %>%
do(head(.,1)) %>%
ungroup()
View(fuzzy_result_id2)
# get the labels from the database + other variables from the new_input
fuzzy_result <- fuzzy_result %>%
left_join(database_clean %>% filter(q.type %in% type_element) %>%
select(true_ID, database_label_clean) %>% distinct()) %>%
left_join(new_input %>%
dplyr::filter(q.type %in% type_element) %>%
select(sector,text2, label_english,
q.type,name,merger_column_new,list_name,datasheet))%>%
distinct()
nrow(fuzzy_result_id2) >0
fuzzy_result_back <- fuzzy_result
fuzzy_result %>% filter(merger_column_new %in% fuzzy_result_id2$merger_column_new)
fuzzy_result %>% filter(merger_column_new %in% fuzzy_result_id2$merger_column_new) %>% View()
View(fuzzy_result_back)
fuzzy_result %>% filter(!merger_column_new %in% fuzzy_result_id2$merger_column_new) %>% View()
fuzzy_result <- fuzzy_result %>% filter(!merger_column_new %in% fuzzy_result_id2$merger_column_new)
fuzzy_result_id2 <- fuzzy_result_back%>%
semi_join(fuzzy_result_id2) %>%
select(-c(merger_column,similarity)) %>%
select(-c(database_label_clean,label_english,merger_column_new)) %>%
rename(database_label_clean = text2) %>%
mutate(project_ID = input$newName,
round_ID = input$round_id,
survey_type = input$newType) %>%
distinct()
fuzzy_result_id2 <- fuzzy_result_back%>%
semi_join(fuzzy_result_id2) %>%
select(-c(merger_column,similarity)) %>%
select(-c(database_label_clean,label_english,merger_column_new)) %>%
rename(database_label_clean = text2) %>%
# mutate(project_ID = input$newName,
#        round_ID = input$round_id,
#        survey_type = input$newType) %>%
distinct()
View(fuzzy_result_id2)
fuzzy_identical
View(fuzzy_result)
View(fuzzy_identical)
fuzzy_result %>%
filter(similarity <0.97) %>%
select(-c(merger_column,similarity)) %>%
tibble()
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
new_input
match_id
any(!new_input[new_input$q.type %in% type_element, ]$text2 %in% c(unique(fuzzy_result$text2),match_id))
type_element<<-c('select_one', 'select_multiple')
any(!new_input[new_input$q.type %in% type_element, ]$text2 %in% c(unique(fuzzy_result$text2),match_id))
any(!new_input[new_input$q.type %in% type_element, ]$text2
!new_input[new_input$q.type %in% type_element, ]$text2
new_input[new_input$q.type %in% type_element, ]$text2
c(unique(fuzzy_result$text2),match_id)
new_input[!new_input$text2 %in% c(unique(fuzzy_result$text2),match_id) &
new_input$q.type %in% type_element , ]
any(!new_input[new_input$q.type %in% type_element, ]$text2
new_input[new_input$q.type %in% type_element, ]$text2
fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2
fuzzy_result
fuzzy_result
match_id
unique(fuzzy_identical$database_label_clean)
new_input[!new_input$text2 %in% c(unique(fuzzy_result$text2),match_id) &
new_input$q.type %in% type_element , ]
missing_text <-
new_input[!new_input[new_input$q.type %in% type_element, ]$text2 %in%
c(unique(fuzzy_result$text2),match_id) &
new_input$q.type %in% type_element , ]
missing_text
c(unique(fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2),match_id
runApp('shiny_12_final_updates.R')
match_id
new_input
runApp('shiny_12_final_updates.R')
any(!new_input[new_input$q.type %in% type_element, ]$text2 %in%
c(unique(fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2),match_id))
new_input[new_input$q.type %in% type_element, ]$text2
unique(fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2)
match_id
any(!new_input[new_input$q.type %in% type_element, ]$text2 %in%
c(unique(fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2),match_id))
new_input[!new_input[new_input$q.type %in% type_element, ]$text2 %in% c(unique(fuzzy_result$text2),match_id) &
new_input$q.type %in% type_element , ]
new_input[new_input$q.type %in% type_element, ]$text2
new_input[new_input$q.type %in% type_element, ]$text2 %in% c(unique(fuzzy_result$text2),match_id) &
new_input$q.type %in% type_element
c(unique(fuzzy_result$text2),match_id
c(unique(fuzzy_result$text2),match_id)
c(unique(fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2),match_id)
new_input[new_input$q.type %in% type_element, ]$text2
new_input
View(new_input[new_input$q.type %in% type_element, ])
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
View(fuzzy_identical)
View(new_input)
match_id
View(new_input)
type_element<<-c('select_one', 'select_multiple')
fuzzy_identical
type_element
type_element<<-c('integer', 'decimal')
fuzzy_identical[fuzzy_identical$q.type %in% type_element,]$database_label_clean
match_id <- unique(fuzzy_identical[fuzzy_identical$q.type %in% type_element,]$database_label_clean)
any(!new_input[new_input$q.type %in% type_element, ]$text2 %in%
c(unique(fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2),match_id))
any(!new_input[new_input$q.type %in% type_element, ]$text2
new_input[new_input$q.type %in% type_element, ]$text2
type_element
new_input
ew_input[new_input$q.type %in% type_element, ]$text2
new_input
new_input[new_input$q.type %in% type_element,]
runApp('shiny_12_final_updates.R')
any(!new_input_type$text2 %in%
c(unique(fuzzy_result[fuzzy_result$q.type %in% type_element,]$text2),match_id))
new_input_type$text2
fuzzy_result
match_id
runApp('shiny_12_final_updates.R')
gc()
runApp('shiny_12_final_updates.R')
type_element
match_id
fuzzy_identical
new_input_type
runApp('shiny_12_final_updates.R')
new_input_type
fuzzy_result
match_id
fuzzy_result
fuzzy_identical
runApp('shiny_12_final_updates.R')
new_input_type
fuzzy_result
fuzzy_identical
match_id
type_element
View(new_input_type)
runApp('shiny_12_final_updates.R')
View(new_input_type)
runApp('shiny_12_final_updates.R')
View(new_input)
runApp('shiny_12_final_updates.R')
library(shiny); runApp('shiny_12_final_updates.R')
help(st_write)
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
od$load_rds("Documents/Questions_db/Project_database.rds")
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
nm
rnd
tp
nm =='' | rnd=='' | tp==''
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
ui <- shinyUI(bootstrapPage(
actionButton("test1", "test1"),
actionButton("test2", "test2"))
)
server <- shinyServer(function(input, output) {
observeEvent({
input$test1
input$test2
}, {
print('Hello World')
})
})
shinyApp(ui, server)
ui <- shinyUI(bootstrapPage(
actionButton("test1", "test1"),
actionButton("test2", "test2"))
)
server <- shinyServer(function(input, output) {
observeEvent({
input$test1
input$test2
}, {
print('Hello World')
})
})
shinyApp(ui, server)
shinyApp(ui, server)
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
cos(48/pi)
cos(0.48/pi)
4*pi/15
0.48*(pi/180)
48*(pi/180)
cos(48*(pi/180))
pi
help(pi)
library(shiny); runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
help(reactiveValues)
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
input_values
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
help(my_inputs)
help(reactiveVal)
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
my_inputs
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
help(isolate)
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
library(shiny); runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
runApp('shiny_12_final_updates.R')
library(shiny)
library(shinyjs)
library(DT)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(stringdist)
library(fuzzyjoin)
library(rhandsontable)
library(data.table)
library(ids)
library(sharepointR)
library(httr)
library(xml2)
library(curl)
library(tidytext)
library(utilityR)
source('.Rprofile')
source("www/src/STX_Utils_DB_app.R")
source("www/src/STX_Utils_DB_app.R")
my_connection <- dbConnect(odbc::odbc(),
Driver = "SQL Server",
server = Sys.getenv('name1'),
database = Sys.getenv('name2'),
uid = Sys.getenv('name3'),
pwd = Sys.getenv('name4'),
Port = 1433)
database_proj_dist <- dbGetQuery(my_connection , "SELECT DISTINCT project_ID, round_ID from Reach_QDB")
database_proj_dist
database_proj_count<- dbGetQuery(my_connection , "SELECT project_ID, COUNT(*) as N_questions from Reach_QDB GROUP BY project_ID")
database_proj_count
database_research_cycle <- dbGetQuery(my_connection , "SELECT * from Research_cycle_db")
database_research_cycle
library(shiny); runApp('shiny_13_final_updates.R')
dbDisconnect(my_connection)
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
showConnections()
closeAllConnections()
runApp('shiny_13_final_updates.R')
source('www/src/get_db.R')
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, survey_type, round_ID from Reach_QDB")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, survey_type, round_ID from Reach_QDB where project_ID='UKR2203")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, survey_type, round_ID from Reach_QDB where project_ID=-'UKR2203")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, survey_type, round_ID from Reach_QDB where project_ID=='UKR2203")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, survey_type, round_ID from Reach_QDB where project_ID=='UKR2203'")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, survey_type, round_ID from Reach_QDB where project_ID='UKR2203'")
runApp('shiny_13_final_updates.R')
table <- dbGetQuery(my_connection , "SELECT * from Reach_QDB")
View(table)
table %>% group_by(project_ID,survey_type,round_ID) %>% summarise(cnt = n())
table %>% group_by(project_ID,survey_type,round_ID) %>% summarise(cnt = n()) %>% View()
table %>% nrow()
table %>% distinct() %>% nrow()
table %>% distinct()%>% group_by(project_ID,survey_type,round_ID) %>% summarise(cnt = n()) %>% View()
table <- table %>% distinct()%>% group_by(project_ID,survey_type,round_ID) %>% summarise(cnt = n())
my_connection <- dbConnect(odbc::odbc(),
Driver = "ODBC Driver 17 for SQL Server",
server = "sqldb-pf-2024-052.database.windows.net",
database = "REACH_DB",
uid = "Nestor_Cheryba",
pwd = "My_Str0ng_Pa$$w()rd21",
Port = 1433)
class(table)
table <- table %>% ungroup()
table
table <- dbGetQuery(my_connection , "SELECT * from Reach_QDB")
table <- table %>% distinct()
table %>% distinct()%>% group_by(project_ID,survey_type,round_ID) %>% summarise(cnt = n())
table %>% distinct()%>% group_by(project_ID,survey_type,round_ID) %>% summarise(cnt = n()) %>% View()
dbWriteTable(conn=my_connection, name="Reach_QDB",value= table,overwrite=T )
gc()
runApp('shiny_13_final_updates.R')
dbDisconnect(my_connection)
runApp('shiny_13_final_updates.R')
local
my_connection <- if(Sys.info()[['user']]== 'shiny'){
dbConnect(odbc::odbc(),
Driver   = "FreeTDS",
Database = Sys.getenv('name2'),
Uid      = Sys.getenv('name3'),
Pwd      = Sys.getenv('name4'),
Server   = Sys.getenv('name1'),
Port     = 1433,
TDS_Version=8.0
)
}else{
dbConnect(odbc::odbc(),
driver = "SQL Server",
server = Sys.getenv('name1'),
database = Sys.getenv('name2'),
uid = Sys.getenv('name3'),
pwd = Sys.getenv('name4')
)
}
library(shiny); runApp('shiny_13_final_updates.R')
rsconnect::showLogs('C:/Users/reach/Desktop/Git/Reach_QDB/')
rsconnect::showLogs('C:/Users/reach/Desktop/Git/Reach_QDB/')
rsconnect::showLogs('C:/Users/reach/Desktop/Git/Reach_QDB/')
library(DBI)
my_connection <- dbConnect(odbc::odbc(), Driver = "SQL Server",
server = "sqldb-pf-2024-052.database.windows.net", database = "REACH_DB",
uid = "Nestor_Cheryba", pwd = "My_Str0ng_Pa$$w()rd21", Port = 1433)
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, round_ID, type_survey from Research_cycle_db where project_ID='UKR2203' and round_ID = 21")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, round_ID, type_survey from Research_cycle_db where project_ID='UKR2203' and round_ID = '21'")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, round_ID, survey_type from Research_cycle_db where project_ID='UKR2203' and round_ID = '21'")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, round_ID, survey_type from Reach_QDB where project_ID='UKR2203' and round_ID = '21'")
dbGetQuery(my_connection , "SELECT DISTINCT project_ID, round_ID, survey_type from Reach_QDB where project_ID='UKR2203' and round_ID = '21'")
dbDisconnect(my_connection)
