library(curl)
library(tidytext)
library(utilityR)
# library(mapview)
# library(webshot)
source('.Rprofile')
source("www/src/STX_Utils_DB_app.R")
source('www/src/reticulate_functions2.R')
req_variables <- c('q.type','sector','name','label::English','list_name','datasheet')
# webshot::install_phantomjs(force = T)
options(shiny.maxRequestSize = 30 * 1024 ^ 2,
rsconnect.max.bundle.files = 5145728000)
options(shiny.sanitize.errors = TRUE)
PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','spacy')
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
print('creating an environment')
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
numpy_av <- reticulate::py_module_available("numpy")
py_packages <- reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy')) %>%
filter(!requirement %in% c("numpy==1.26.4"))
# install packages
if(any(!c(spacy_av,pandas_av,numpy_av)) | nrow(py_packages)>0){
reticulate::virtualenv_install(virtualenv_dir,
packages = c("-r", "www/requirements.txt"),
ignore_installed=TRUE)
}
reticulate::use_virtualenv(virtualenv_dir, required = T)
#install the language model
if(!model_av){
system("python -c \"import spacy; spacy.cli.download('en_core_web_md')\"")
}
print(reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy','pandas')))
!exists('similarity_calculator')
system("python -c \"import numpy as np\"")
source_python_2('www/src/semantic_match.py')
print(similarity_calculator(
column_new = 'pineapple',
qdb = data.frame(merger_column = c("apple", "orange"), true_ID = c(1, 2)),
sim_th = 0.5
) )
rsconnect::showLogs()
rsconnect::showLogs()
system("python -c \"www/src/semantic_match.py\"")
system("python -c \"'www/src/semantic_match.py'\"")
print(similarity_calculator(
column_new = 'pineapple',
qdb = data.frame(merger_column = c("apple", "orange"), true_ID = c(1, 2)),
sim_th = 0.5
) )
gc()
library(shiny)
library(shinyjs)
library(DT)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(stringdist)
library(fuzzyjoin)
library(rhandsontable)
library(data.table)
library(ids)
library(httr)
library(xml2)
library(curl)
library(tidytext)
library(utilityR)
# library(mapview)
# library(webshot)
source('.Rprofile')
source("www/src/STX_Utils_DB_app.R")
source('www/src/reticulate_functions2.R')
# to do -----------
req_variables <- c('q.type','sector','name','label::English','list_name','datasheet')
# webshot::install_phantomjs(force = T)
options(shiny.maxRequestSize = 30 * 1024 ^ 2,
rsconnect.max.bundle.files = 5145728000)
options(shiny.sanitize.errors = TRUE)
# map setup
# Python Setup
PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','spacy')
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
print('creating an environment')
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
#reticulate::virtualenv_remove(virtualenv_dir)
# reticulate::use_virtualenv(virtualenv_dir, required = T)
# reticulate::use_virtualenv(virtualenv_dir, required = T)
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
numpy_av <- reticulate::py_module_available("numpy")
py_packages <- reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy')) %>%
filter(!requirement %in% c("numpy==1.26.4"))
# install packages
if(any(!c(spacy_av,pandas_av,numpy_av)) | nrow(py_packages)>0){
reticulate::virtualenv_install(virtualenv_dir,
packages = c("-r", "www/requirements.txt"),
ignore_installed=TRUE)
}
reticulate::use_virtualenv(virtualenv_dir, required = T)
#install the language model
if(!model_av){
system("python -c \"import spacy; spacy.cli.download('en_core_web_md')\"")
}
print(reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy','pandas')))
# # source the python script
# make sure to activate the virtual env
system("python -c \"'www/src/semantic_match.py'\"")
print(similarity_calculator(
column_new = 'pineapple',
qdb = data.frame(merger_column = c("apple", "orange"), true_ID = c(1, 2)),
sim_th = 0.5
) )
if(!exists('similarity_calculator')){
system("python -c \"'www/src/semantic_match.py'\"")
#source_python_2('www/src/semantic_match.py')
}
python_code <- "
import numpy as np
import pandas as pd
import spacy
nlp = spacy.load('en_core_web_md')
def similarity_calculator(qdb, column_new, sim_th):
column_qdb = qdb[['merger_column', 'true_ID']].drop_duplicates()
column_qdb = column_qdb.reset_index(drop=True)
if isinstance(column_new, str):
column_new = [column_new]
docs_df1 = list(nlp.pipe(column_new))
docs_df2 = list(nlp.pipe(column_qdb['merger_column']))
result_df = pd.DataFrame({'merger_column_new': column_new})
for i, doc_df2 in enumerate(docs_df2):
col_name = f\"{column_qdb['true_ID'][i]}_separator_{docs_df2[i]}\"
similarities = np.array([doc1.similarity(doc_df2) for doc1 in docs_df1])
filtered_similarities = similarities[similarities > sim_th]
if len(filtered_similarities) > 0:
result_df = pd.concat([result_df, pd.DataFrame({col_name: similarities})], axis=1)
result_df_long = result_df.melt(id_vars=['merger_column_new'], var_name='merger_column_inter', value_name='similarity')
if len(result_df_long.index) == 0:
return pd.DataFrame(columns=['merger_column_new', 'similarity', 'true_ID', 'merger_column'])
else:
result_df_long[['true_ID', 'merger_column']] = result_df_long['merger_column_inter'].str.split('_separator_', expand=True)
result_df_long = result_df_long.drop('merger_column_inter', axis=1)
result_df_long['similarity'] = pd.to_numeric(result_df_long['similarity'])
result_df_clean = result_df_long[result_df_long['similarity'] > sim_th]
return result_df_clean
"
# Execute the Python code
reticulate::py_run_string(python_code)
similarity_calculator <- reticulate::py$similarity_calculator
similarity_calculator
library(shiny)
library(shinyjs)
library(DT)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(stringdist)
library(fuzzyjoin)
library(rhandsontable)
library(data.table)
library(ids)
library(httr)
library(xml2)
library(curl)
library(tidytext)
library(utilityR)
# library(mapview)
# library(webshot)
source('.Rprofile')
source("www/src/STX_Utils_DB_app.R")
source('www/src/reticulate_functions2.R')
# to do -----------
req_variables <- c('q.type','sector','name','label::English','list_name','datasheet')
# webshot::install_phantomjs(force = T)
options(shiny.maxRequestSize = 30 * 1024 ^ 2,
rsconnect.max.bundle.files = 5145728000)
options(shiny.sanitize.errors = TRUE)
# map setup
# Python Setup
PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','spacy')
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
print('creating an environment')
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
#reticulate::virtualenv_remove(virtualenv_dir)
# reticulate::use_virtualenv(virtualenv_dir, required = T)
# reticulate::use_virtualenv(virtualenv_dir, required = T)
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
numpy_av <- reticulate::py_module_available("numpy")
py_packages <- reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy')) %>%
filter(!requirement %in% c("numpy==1.26.4"))
# install packages
if(any(!c(spacy_av,pandas_av,numpy_av)) | nrow(py_packages)>0){
reticulate::virtualenv_install(virtualenv_dir,
packages = c("-r", "www/requirements.txt"),
ignore_installed=TRUE)
}
reticulate::use_virtualenv(virtualenv_dir, required = T)
#install the language model
if(!model_av){
system("python -c \"import spacy; spacy.cli.download('en_core_web_md')\"")
}
print(reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy','pandas')))
if(!exists('similarity_calculator')){
source('www/src/semantic_match.R')
}
print(similarity_calculator(
column_new = 'pineapple',
qdb = data.frame(merger_column = c("apple", "orange"), true_ID = c(1, 2)),
sim_th = 0.5
) )
help(on.exit)
help(py_run_string_impl)
reticulate:::py_run_string_impl
source('www/src/semantic_match.R')
python_code <- "
import numpy as np
import pandas as pd
import spacy
nlp = spacy.load('en_core_web_md')
def similarity_calculator(qdb, column_new, sim_th):
column_qdb = qdb[['merger_column', 'true_ID']].drop_duplicates()
column_qdb = column_qdb.reset_index(drop=True)
if isinstance(column_new, str):
column_new = [column_new]
docs_df1 = list(nlp.pipe(column_new))
docs_df2 = list(nlp.pipe(column_qdb['merger_column']))
result_df = pd.DataFrame({'merger_column_new': column_new})
for i, doc_df2 in enumerate(docs_df2):
col_name = f\"{column_qdb['true_ID'][i]}_separator_{docs_df2[i]}\"
similarities = np.array([doc1.similarity(doc_df2) for doc1 in docs_df1])
filtered_similarities = similarities[similarities > sim_th]
if len(filtered_similarities) > 0:
result_df = pd.concat([result_df, pd.DataFrame({col_name: similarities})], axis=1)
result_df_long = result_df.melt(id_vars=['merger_column_new'], var_name='merger_column_inter', value_name='similarity')
if len(result_df_long.index) == 0:
return pd.DataFrame(columns=['merger_column_new', 'similarity', 'true_ID', 'merger_column'])
else:
result_df_long[['true_ID', 'merger_column']] = result_df_long['merger_column_inter'].str.split('_separator_', expand=True)
result_df_long = result_df_long.drop('merger_column_inter', axis=1)
result_df_long['similarity'] = pd.to_numeric(result_df_long['similarity'])
result_df_clean = result_df_long[result_df_long['similarity'] > sim_th]
return result_df_clean
"
# Execute the Python code
py_run_string_2(python_code)
py_run_string_2 <- function (code, local = FALSE, convert = TRUE)
{
on.exit(reticulate:::py_flush_output(), add = TRUE)
invisible(reticulate:::py_run_string_impl(code, local, convert))
}
# Execute the Python code
py_run_string_2(python_code)
similarity_calculator <- reticulate::py$similarity_calculator
gc()
rsconnect::showLogs()
library(shiny)
library(shinyjs)
library(DT)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(stringdist)
library(fuzzyjoin)
library(rhandsontable)
library(data.table)
library(ids)
library(httr)
library(xml2)
library(curl)
library(tidytext)
library(utilityR)
# library(mapview)
# library(webshot)
source('.Rprofile')
source("www/src/STX_Utils_DB_app.R")
source('www/src/reticulate_functions2.R')
# to do -----------
req_variables <- c('q.type','sector','name','label::English','list_name','datasheet')
# webshot::install_phantomjs(force = T)
options(shiny.maxRequestSize = 30 * 1024 ^ 2,
rsconnect.max.bundle.files = 5145728000)
options(shiny.sanitize.errors = TRUE)
# map setup
# Python Setup
PYTHON_DEPENDENCIES = c('pip', 'numpy','pandas','spacy')
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
print('creating an environment')
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
#reticulate::virtualenv_remove(virtualenv_dir)
# reticulate::use_virtualenv(virtualenv_dir, required = T)
# reticulate::use_virtualenv(virtualenv_dir, required = T)
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
numpy_av <- reticulate::py_module_available("numpy")
py_packages <- reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy')) %>%
filter(!requirement %in% c("numpy==1.26.4"))
# install packages
if(any(!c(spacy_av,pandas_av,numpy_av)) | nrow(py_packages)>0){
reticulate::virtualenv_install(virtualenv_dir,
packages = c("-r", "www/requirements.txt"),
ignore_installed=TRUE)
}
reticulate::use_virtualenv(virtualenv_dir, required = T)
print(py_config())
reticulate::use_virtualenv(virtualenv_dir, required = T)
print(reticulate::py_config())
print(reticulate::py_list_packages(virtualenv_dir) %>%
filter(package %in% c('numpy','pandas')))
rsconnect::showLogs()
reticulate::py_config()
rsconnect::showLogs()
reticulate::py_run_file('www/src/semantic_match.py')
rsconnect::showLogs()
reticulate::py_list_packages(virtualenv_dir)
rsconnect::showLogs()
virtualenv_dir
rsconnect::showLogs()
library(shiny)
library(shinyjs)
library(DT)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(stringdist)
library(fuzzyjoin)
library(rhandsontable)
library(data.table)
library(ids)
library(httr)
library(xml2)
library(curl)
library(tidytext)
library(utilityR)
# library(mapview)
# library(webshot)
source('.Rprofile')
source("www/src/STX_Utils_DB_app.R")
source('www/src/reticulate_functions2.R')
# to do -----------
req_variables <- c('q.type','sector','name','label::English','list_name','datasheet')
# webshot::install_phantomjs(force = T)
options(shiny.maxRequestSize = 30 * 1024 ^ 2,
rsconnect.max.bundle.files = 5145728000)
options(shiny.sanitize.errors = TRUE)
# map setup
# Python Setup
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
# install packages
reticulate::virtualenv_install(virtualenv_dir,
packages = c("-r", "www/requirements.txt"),
ignore_installed=TRUE)
reticulate::py_run_file('www/src/semantic_match.py')
similarity_calculator
if(!exists('similarity_calculator')){
reticulate::py_run_file('www/src/semantic_match.py')
}
if(!exists('similarity_calculator')){
reticulate::source_python('www/src/semantic_match.py')
}
gc()
rsconnect::showLogs()
samp<-c(2:9,letters,LETTERS,"!", "$", "%", "&", "(", ")", "*")
paste(sample(samp,20),collapse="")
rsconnect::showLogs()
help(hashpw)
??hashpw
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
rsconnect::showLogs()
library(shiny); runApp('shiny_13_final_updates.R')
Sys.getenv('pw')
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
gc()
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
rsconnect::deployments()
library(shiny); runApp('shiny_13_final_updates.R')
reticulate::py_module_available("numpy")
numpy_av|pandas_av|spacy_av
# install packages
numpy_av <-  reticulate::py_module_available("numpy")
pandas_av <- reticulate::py_module_available("pandas")
spacy_av <- reticulate::py_module_available("pandas")
numpy_av|pandas_av|spacy_av
spacy_av <- FALSE
numpy_av|pandas_av|spacy_av
numpy_av&pandas_av&spacy_av
pandas_av
spacy_av
spacy_av <- reticulate::py_module_available("spacy")
numpy_av&pandas_av&spacy_av
runApp('shiny_13_final_updates.R')
testo_2 %>%
filter(
!grepl(
'enum|partner|rectangle|geo_location|geopoint|street_type_calc|
name_uid_list|site_name_text|site_name|consent',
name
)
)
#filter out rows with columns we don't need
data <- testo_2 %>%
filter(
!grepl(
'enum|partner|rectangle|geo_location|geopoint|street_type_calc|
name_uid_list|site_name_text|site_name|consent',
name
)
)
req_variables <- c('q.type','sector','name','label::English','list_name','datasheet')
select(data, any_of(req_variables)) %>%
rename(label_english = `label::English`)%>%
filter(q.type %in% c('select_one', 'select_multiple', 'integer', 'decimal')) %>%
filter(!is.na(label_english))
select(data, any_of(req_variables)) %>%
rename(label_english = `label::English`)%>%
filter(q.type %in% c('select_one', 'select_multiple', 'integer', 'decimal'))
# rename the label column, filter the needed types and get the needed columns
data <- select(data, any_of(req_variables)) %>%
rename(label_english = `label::English`)%>%
filter(q.type %in% c('select_one', 'select_multiple', 'integer', 'decimal')) %>%
filter(!is.na(label_english))
names(data) <- tolower(names(data))
!'sector' %in% names(data)
'sector' %in% names(data) &
any(! (unique((data$sector)) %in% c('WASH','AAP','CCCM','Shelter and NFI','Education',
'Food Security and Livelihoods','Winterization','Health','Displacement',
'Cash and Markets','Government services','Social cohesion',
'Protection','Nutrition','Emergency Telecommunications',
'Logistics','Interview component','Demographics', NA))
)
data %>%
select(sector,name, label_english, list_name, q.type, datasheet) %>%
mutate(sector = gsub('\\&|\\&amp;','and',sector)) %>%
distinct()
data <- data %>%
select(sector,name, label_english, list_name, q.type, datasheet) %>%
mutate(sector = gsub('\\&|\\&amp;','and',sector)) %>%
distinct()
'sector' %in% names(data)
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
runApp('shiny_13_final_updates.R')
data<-test2
View(test2)
View(test2)
View(testo_2)
# testo_2<<-data
#filter out rows with columns we don't need
data <- testo_2 %>%
filter(
!grepl(
'enum|partner|rectangle|geo_location|geopoint|street_type_calc|
name_uid_list|site_name_text|site_name|consent',
name
)
)
# rename the label column, filter the needed types and get the needed columns
data <- select(data, any_of(req_variables)) %>%
rename(label_english = `label::English`)%>%
filter(q.type %in% c('select_one', 'select_multiple', 'integer', 'decimal')) %>%
filter(!is.na(label_english))
View(data)
View(testo_2)
req_variables
'Sector' %in% names(data)
runApp('shiny_13_final_updates.R')
rsconnect::showLogs()
rsconnect::showLogs()
