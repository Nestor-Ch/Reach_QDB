############################################################################################################
#                                                     MAP                                                  #
############################################################################################################
########## Country map in the Input data page ##########
output$country_choice <- renderLeaflet({
choose_country_map
})
observeEvent(input$country_choice_shape_click, {
new_selected <- req(input$country_choice_shape_click)
isolate(old_selected <- rv$selected)
if(is_empty(rounds())){
}else{
if( !input$country_choice_shape_click$id %in% rv$oblasts){
rv$selected <- new_selected
rv$oblasts <- c(rv$oblasts,input$country_choice_shape_click$id)
oblast_iso <- ukraine %>%
filter(ADM_PCODE %in% rv$oblasts)
leafletProxy("country_choice") %>%
clearGroup("selection") %>%
addPolygons(data = oblast_iso,
fillColor = "#EE5859",
color = "#FFFFFF",
fillOpacity = 1,
label = ~oblast_iso$ADM_PCODE,
group = "selection",
layerId = ~oblast_iso$ADM_PCODE)
} else{
rv$selected <- new_selected
rv$oblasts <- setdiff(rv$oblasts,input$country_choice_shape_click$id)
oblast_iso <- ukraine %>%
filter(!ADM_PCODE %in% rv$oblasts)
leafletProxy("country_choice") %>%
addPolygons(data = oblast_iso,
fillColor  = "black",
color = "#FFFFFF",
weight= 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(
fillColor = "#aaaaaa",
color = "#aaaaaa",
weight = 2,
bringToFront = T
),
label = ~oblast_iso$ADM_PCODE,
layerId = ~oblast_iso$ADM_PCODE)
}
}
})
########## Reactive values ##########
rv <- reactiveValues()
rv$selected <- NULL
rv$oblasts <- NULL
########## Project ID OUtput ##########
output$project_id <- renderUI({
# bookmark this stage of the session
session$doBookmark()
project_table <- sp_get_file_reach(sp_con, 'Documents/Questions_db/Project_database.xlsx')
list_project <- project_table %>%
as.data.frame() %>%
pull(Project_ID) %>% unique
selectInput("project_id_selected", "Select Project ID",
choices = c(list_project))
})
rounds <- reactive({
project_table <- sp_get_file_reach(sp_con, 'Documents/Questions_db/Project_database.xlsx')
rounds <- project_table %>%
as.data.frame() %>%
filter(Project_ID == input$project_id_selected) %>% #'UKR2206B'
arrange(as.numeric(round_id)) %>%
pull(round_id) %>%  unique
map_table <- sp_get_file_reach(sp_con, 'Documents/Questions_db/map_table.json',driver = '.json') %>%
filter(Project_ID == input$project_id_selected) %>% #input$project_id_selected
pull(round_id) %>% unique
rounds <- setdiff(rounds,map_table)
return(rounds)
})
# this bit allows the user to return to the 'Geographical Input' tab after clicking the update button
# it takes too long so I'm not using it
# observe({
#   params <- parseQueryString(session$clientData$url_search)
#   if ("tab_index" %in% names(params)) {
#     updateTabsetPanel(session, "Tabpanel", selected = params$tab_index)
#   }
# })
# this bit of Java reloads the page
observeEvent(input$upload, {
isolate(shinyjs::runjs("
location.reload(true);
"))
})
# this bit updates the client browser to the bookmarked state
onBookmarked(function(url) {
updateQueryString(url, mode = 'replace')
})
output$round <- renderUI({
req(input$project_id_selected)
if(is_empty(rounds())) {
HTML(paste0("<p>All rounds for ",input$project_id_selected, " are uploaded"))
} else {
selectInput("round_selected", "Select Round",
choices = c(rounds()))
}
})
output$month <- renderUI({
req(input$project_id_selected,
input$round_selected)
months <- c("January", "February", "March", "April",
"May", "June", "July", "August",
"September", "October", "November", "December")
map_table <- sp_get_file_reach(sp_con, 'Documents/Questions_db/map_table.json',driver = '.json') %>%
filter(Project_ID == input$project_id_selected) %>%
pull(month) %>% unique
months <- setdiff(months,map_table)
if(is_empty(rounds())) {
} else {
selectInput("month_selected", "Select Month",
choices = months)
}
})
output$year <- renderUI({
req(input$project_id_selected,
input$round_selected,
input$month_selected)
years <- 2014:as.numeric(format(Sys.Date(),"%Y"))
map_table <- sp_get_file_reach(sp_con, 'Documents/Questions_db/map_table.json',driver = '.json')%>%
filter(Project_ID == input$project_id_selected)%>%
distinct(year,month) %>% ## change to input$project_id_selected
group_by(year,month)%>%
summarise(n = n()) %>%
filter(n == 12) %>%
pull(year) %>% unique
years <- setdiff(years,map_table)
if(is_empty(rounds())) {
} else {
selectInput("year_selected", "Select Year",
choices = years)
}
})
# read the new map table
map_table <- reactive({
req(input$project_id_selected,
input$round_selected,
input$month_selected,
input$year_selected,
rv$oblasts)
# build a dataframe out of it
map_table <- data.frame(Project_ID = input$project_id_selected,
round_id = input$round_selected,
month = input$month_selected,
year = input$year_selected,
PCODE = rv$oblasts)
# get the sectors from the Project_database
project_table <- sp_get_file_reach(sp_con, 'Documents/Questions_db/Project_database.xlsx') %>%
select(Project_ID, round_id, sector) %>%
# mutate(round_id = as.numeric(round_id)) %>%
distinct() %>%
filter(sector != "",
!is.na(sector))
# get the nice names for every assessment (from research cycle tracker)
assessment_name <- project_table() %>%
select(Project_ID,Name) %>%
rename("Assessment_Name" = Name)
# merge map_table with the sector table, assessment name table and Ukraine geometry, + add a date column for the visual
map_table <- map_table %>%
left_join(project_table, by = c("Project_ID","round_id")) %>%
left_join(assessment_name, by = "Project_ID") %>%
left_join(ukraine %>%
select(ADM_PCODE,ADM_NAME, geometry),
by = c('PCODE'='ADM_PCODE')) %>%
mutate(date = paste0('01/',match(month, month.name),'/',year,' 01:00')) %>%
distinct()
# possible changes here ----------------------
return(map_table)
})
database <- reactive({
map_table <- map_table()
database_map_table <-
sp_get_file_reach(sp_con,
'Documents/Questions_db/map_table.json', driver = '.json') %>%
as.data.frame()
database_map_table <- bind_rows(database_map_table,map_table) %>% distinct()
print(head(database_map_table))
return(database_map_table)
})
observeEvent(input$upload, {
database <- database()
map_table <- database %>% distinct()
assign("map_table",map_table,envir = globalenv())
if(nrow(map_table) > 0){
isolate(sp_post_file_reach(sp_con,
'Documents/Questions_db',
'map_table.json',driver = '.json'))
}
new_selected <- req(input$country_choice_shape_click)
isolate(old_selected <- rv$selected)
rv$selected <- new_selected
oblast_iso <- ukraine %>%
filter(ADM_PCODE %in% rv$oblasts)
leafletProxy("country_choice")%>%
clearGroup("selection")  %>%
addPolygons(data = oblast_iso,
fillColor  = "black",
color = "#FFFFFF",
weight= 1,
fillOpacity = 0.8,
highlightOptions = highlightOptions(
fillColor = "#aaaaaa",
color = "#aaaaaa",
weight = 2,
bringToFront = T
),
label = ~oblast_iso$ADM_PCODE,
layerId = ~oblast_iso$ADM_PCODE)
# showModal(
#   modalDialog(
#     title = "Data uploaded to the workspace",
#     easyClose = TRUE
#   )
# )
rv$oblasts <- NULL
new_selected <- NULL
old_selected <- NULL
})
# output$test <- renderUI({
#   renderTable(map_table())
# })
output$uploadBTN <- renderUI({
req(input$project_id_selected,
input$round_selected,
input$month_selected,
input$year_selected,
rv$oblasts)
if(is_empty(rounds())) {
}else{
isolate(actionButton("upload", "Upload info",
# onclick = "doReload('Geographical Input')"
))
}
})
}
shinyApp(ui = ui, server = server, enableBookmarking = "url")
})
profvis({
# Python Setup
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
reticulate::use_virtualenv(virtualenv_dir, required = T)
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
# install packages
if(any(!c(spacy_av,pandas_av))){
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=FALSE)
}
# install the language model
if(!model_av){
system("python -c \"import spacy; spacy.cli.download('en_core_web_md')\"")
}
# source the python script
reticulate::source_python('www/src/semantic_match.py')
})
profvis({
# Python Setup
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
#  if(!virtualenv_dir %in% reticulate::virtualenv_list()){
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
#  }
reticulate::use_virtualenv(virtualenv_dir, required = T)
# check if modules are available, install only if needed
model_av <- reticulate::py_module_available("en_core_web_md")
spacy_av <- reticulate::py_module_available("spacy")
pandas_av <- reticulate::py_module_available("pandas")
# install packages
if(any(!c(spacy_av,pandas_av))){
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=FALSE)
}
# install the language model
if(!model_av){
system("python -c \"import spacy; spacy.cli.download('en_core_web_md')\"")
}
# source the python script
reticulate::source_python('www/src/semantic_match.py')
})
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
runApp('shiny_12_final_updates.R')
profvis({
runApp('shiny_12_final_updates.R', display.mode = "normal")
})
help(runApp)
profvis({
runApp('shiny_12_final_updates.R', display.mode = "normal", launch.browser=F)
})
profvis({
runApp('shiny_12_final_updates.R', display.mode = "normal")
})
profvis({
runApp('shiny_12_final_updates.R', display.mode = "normal")
})
profvis({
runApp('shiny_12_final_updates.R', display.mode = "normal")
})
# Python Setup
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
if(!virtualenv_dir %in% reticulate::virtualenv_list()){
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
}
reticulate::use_virtualenv(virtualenv_dir, required = T)
reticulate::py_config()
reticulate::py_config()$virtualenv
Sys.getenv('VIRTUALENV_NAME')
grepl(Sys.getenv('VIRTUALENV_NAME'),reticulate::py_config()$virtualenv)
exists(similarity_calculator())
exists(similarity_calculator)
exists('similarity_calculator')
!exists('similarity_calculator')
gc()
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
rsconnect::showLogs(appName="Reach_QDB", account = 'impact-initiatives')
help(shinyoptions)
help(shinyOptions)
??shinyOptions
library(shiny)
library(shinyjs)
library(DT)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(stringdist)
library(fuzzyjoin)
library(rhandsontable)
library(data.table)
library(ids)
library(sharepointR)
library(httr)
library(xml2)
library(curl)
library(tidytext)
library(leaflet)
library(leaflet.extras2)
library(sf)
getShinyOption()
getShinyOption('timeout')
help(getShinyOption)
help(shinyOptions)
shinyOptions(timeout = 120)
devtools::install_github('Nestor-Ch/utilityR')
help(apply.changes)
??apply.changes
